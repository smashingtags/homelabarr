# HomelabARR Production Environment Configuration
# This file contains production-optimized settings with security best practices
# Copy this to .env for production deployment

# =============================================================================
# PRODUCTION ENVIRONMENT SETTINGS
# =============================================================================

# Production environment mode - enables security-focused defaults
NODE_ENV=production

# Production logging level - reduces verbosity for performance
LOG_LEVEL=info

# =============================================================================
# PRODUCTION SERVER CONFIGURATION
# =============================================================================

# Backend server port
PORT=3001

# Frontend and backend ports for reverse proxy configuration
FRONTEND_PORT=8087
BACKEND_PORT=8088

# Bind to all interfaces for container and reverse proxy compatibility
BIND_ADDRESS=0.0.0.0

# =============================================================================
# PRODUCTION CORS CONFIGURATION
# =============================================================================

# CRITICAL: Set specific origins for production security
# NEVER use wildcard (*) in production environments
# Examples:
#   Single domain: https://your-domain.com
#   Multiple domains: https://app.example.com,https://admin.example.com
#   With subdomains: https://homelabarr.yourdomain.com
# 
# SECURITY WARNING: Wildcard CORS origins expose your API to all domains
# This creates serious security vulnerabilities in production
CORS_ORIGIN=https://your-domain.com

# =============================================================================
# PRODUCTION DOCKER CONFIGURATION
# =============================================================================

# Docker socket path - platform-specific configuration
# Linux: /var/run/docker.sock (most common)
# Custom: /path/to/custom/docker.sock
# Windows: //./pipe/docker_engine (if running on Windows Server)
DOCKER_SOCKET=/var/run/docker.sock

# Docker group ID - CRITICAL for proper permissions
# MUST match your production host system's docker group ID
# 
# Find your production docker group ID:
#   Linux: getent group docker | cut -d: -f3
#   Alternative: cat /etc/group | grep docker
# 
# Common production values:
#   Ubuntu/Debian: 999, 998
#   CentOS/RHEL/Rocky: 994, 993
#   Alpine Linux: 100
#   Amazon Linux: 497
DOCKER_GID=999

# Production timeout - shorter for better responsiveness
DOCKER_TIMEOUT=30000

# =============================================================================
# PRODUCTION AUTHENTICATION CONFIGURATION
# =============================================================================

# ALWAYS enable authentication in production
AUTH_ENABLED=true

# CRITICAL: Generate a strong, unique JWT secret for production
# Use a cryptographically secure random string (minimum 32 characters)
# Generate with: openssl rand -base64 32
# NEVER use default or development secrets in production
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Production token expiration - shorter for better security
JWT_EXPIRES_IN=24h

# CRITICAL: Change default admin password immediately after deployment
# Use a strong password with:
# - Minimum 12 characters
# - Mixed case letters
# - Numbers and symbols
# - No dictionary words
DEFAULT_ADMIN_PASSWORD=change-this-immediately-after-first-login

# =============================================================================
# PRODUCTION SERVICE URLS
# =============================================================================

# Production service URLs - use your actual domain names
# These should match your reverse proxy or load balancer configuration

# Frontend service URL - your public frontend domain
FRONTEND_URL=https://your-domain.com

# Backend service URL - your public API domain
# Can be same domain with /api path or separate subdomain
BACKEND_URL=https://api.your-domain.com

# External health check URL - for load balancers and monitoring systems
EXTERNAL_HEALTH_URL=https://api.your-domain.com/health

# Production database URL - use external database for scalability
# Examples:
#   PostgreSQL: postgresql://user:password@db-host:5432/homelabarr
#   MySQL: mysql://user:password@db-host:3306/homelabarr
#   SQLite (not recommended for production): sqlite:///app/data/homelabarr.db
DATABASE_URL=postgresql://homelabarr_user:secure_password@database:5432/homelabarr

# Production Redis URL - for session storage and caching
# Examples:
#   Local Redis: redis://redis:6379
#   Redis with auth: redis://user:password@redis:6379
#   Redis Cluster: redis://redis-cluster:6379
REDIS_URL=redis://redis:6379

# =============================================================================
# PRODUCTION SECURITY SETTINGS
# =============================================================================

# Disable debug mode for security and performance
DEBUG_MODE=false

# Disable verbose logging to prevent information leakage
ENABLE_CORS_LOGGING=false
ENABLE_REQUEST_LOGGING=false
ENABLE_DOCKER_LOGGING=false
DETAILED_LOGGING=false

# =============================================================================
# PRODUCTION PERFORMANCE SETTINGS
# =============================================================================

# Production timeouts - optimized for performance
REQUEST_TIMEOUT=10000
HEALTH_CHECK_TIMEOUT=5000

# Enable health check for load balancer integration
HEALTH_CHECK_ENABLED=true

# Enable metrics for production monitoring
METRICS_ENABLED=true

# =============================================================================
# PRODUCTION VALIDATION SETTINGS
# =============================================================================

# Enable validation for production reliability
VALIDATE_DOCKER_SOCKET=true
VALIDATE_SERVICE_URLS=true

# =============================================================================
# PRODUCTION DATA AND STORAGE
# =============================================================================

# Data storage path for persistent data
DATA_PATH=/app/data

# Default Docker network for service communication
DEFAULT_NETWORK=homelabarr

# Backup configuration (if using automated backups)
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE=0 2 * * *
# BACKUP_RETENTION_DAYS=30
# BACKUP_STORAGE_PATH=/app/backups

# =============================================================================
# PRODUCTION MONITORING AND OBSERVABILITY
# =============================================================================

# Application monitoring (if using external monitoring)
# MONITORING_ENABLED=true
# MONITORING_ENDPOINT=https://monitoring.your-domain.com/webhook
# MONITORING_API_KEY=your-monitoring-api-key

# Log aggregation (if using external log management)
# LOG_AGGREGATION_ENABLED=true
# LOG_AGGREGATION_ENDPOINT=https://logs.your-domain.com/api/logs
# LOG_AGGREGATION_API_KEY=your-log-api-key

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================

# SECURITY CHECKLIST:
# ✓ Change JWT_SECRET to a strong, unique value
# ✓ Change DEFAULT_ADMIN_PASSWORD immediately after deployment
# ✓ Set CORS_ORIGIN to your specific domain(s) - NEVER use *
# ✓ Enable AUTH_ENABLED=true
# ✓ Disable all debug and verbose logging features
# ✓ Use HTTPS for all service URLs
# ✓ Ensure Docker socket has proper permissions
# ✓ Use external database instead of SQLite for scalability
# ✓ Configure proper backup and monitoring

# PERFORMANCE CHECKLIST:
# ✓ Set appropriate timeouts for your infrastructure
# ✓ Enable metrics collection for monitoring
# ✓ Use Redis for session storage and caching
# ✓ Configure proper resource limits in Docker
# ✓ Use reverse proxy (nginx, traefik) for SSL termination
# ✓ Enable gzip compression in reverse proxy
# ✓ Configure proper log rotation

# INFRASTRUCTURE CHECKLIST:
# ✓ Use container orchestration (Docker Compose, Kubernetes)
# ✓ Configure health checks for load balancers
# ✓ Set up automated backups
# ✓ Configure monitoring and alerting
# ✓ Use secrets management for sensitive values
# ✓ Implement proper network security (firewalls, VPNs)
# ✓ Configure SSL/TLS certificates

# =============================================================================
# PRODUCTION TROUBLESHOOTING
# =============================================================================

# Common production issues and solutions:

# CORS Issues in Production:
# - Verify CORS_ORIGIN matches your exact domain
# - Include protocol (https://) and port if non-standard
# - Check for trailing slashes in domain configuration
# - Verify reverse proxy is not modifying Origin headers

# Docker Permission Issues:
# - Ensure DOCKER_GID matches host system: getent group docker
# - Verify Docker socket is mounted with correct permissions
# - Check container user has access to Docker socket
# - For rootless Docker: adjust socket path accordingly

# Authentication Issues:
# - Verify JWT_SECRET is set and consistent across restarts
# - Check token expiration settings
# - Ensure HTTPS is used for secure cookie transmission
# - Verify database connectivity for user storage

# Performance Issues:
# - Monitor resource usage: docker stats
# - Check database connection pool settings
# - Verify Redis connectivity for session storage
# - Monitor application logs for bottlenecks
# - Use APM tools for detailed performance analysis

# =============================================================================
# PRODUCTION VALIDATION COMMANDS
# =============================================================================

# Validate your production environment:
# 1. Security: curl -I https://your-domain.com (check HTTPS)
# 2. Health: curl https://api.your-domain.com/health
# 3. Docker: docker ps && docker info
# 4. Database: Test database connectivity
# 5. Redis: redis-cli ping (if using Redis)
# 6. Logs: Check application logs for errors
# 7. Monitoring: Verify monitoring systems are receiving data