# HomelabARR Docker Compose Environment Configuration
# This file contains Docker Compose specific settings for containerized deployment
# Copy this to .env for Docker Compose deployment

# =============================================================================
# DOCKER COMPOSE ENVIRONMENT SETTINGS
# =============================================================================

# Environment mode for Docker deployment
# Use 'development' for local Docker development
# Use 'production' for production Docker deployment
NODE_ENV=development

# Logging level for containerized deployment
LOG_LEVEL=info

# =============================================================================
# DOCKER COMPOSE PORT CONFIGURATION
# =============================================================================

# Frontend port - exposed to host system
# Default: 8084 (matches current working configuration)
# Change if port conflicts with other services
FRONTEND_PORT=8084

# Backend port - exposed to host system  
# Default: 8092 (matches current working configuration)
# Change if port conflicts with other services
BACKEND_PORT=8092

# Internal backend port (container-to-container communication)
# Default: 8092 (updated to match current architecture)
# Usually no need to change unless customizing Docker Compose
PORT=8092

# =============================================================================
# DOCKER COMPOSE CORS CONFIGURATION
# =============================================================================

# CORS origin for Docker Compose deployment
# Development: Use * for local development
# Production: Set to your specific domain
CORS_ORIGIN=*

# =============================================================================
# DOCKER COMPOSE AUTHENTICATION
# =============================================================================

# Authentication settings for Docker deployment
AUTH_ENABLED=false

# JWT secret for Docker deployment
# CRITICAL: Change this for production deployments
# Generate with: openssl rand -base64 32
JWT_SECRET=homelabarr-docker-secret-change-this-in-production

# JWT token expiration
JWT_EXPIRES_IN=24h

# Default admin password for Docker deployment
# CRITICAL: Change this immediately after first login
DEFAULT_ADMIN_PASSWORD=admin

# =============================================================================
# DOCKER COMPOSE NETWORK CONFIGURATION
# =============================================================================

# Bind address for container networking
# Always use 0.0.0.0 for Docker containers
BIND_ADDRESS=0.0.0.0

# Service URLs for container-to-container communication
# These use Docker Compose service names for internal networking
FRONTEND_URL=http://homelabarr-frontend:8080
BACKEND_URL=http://homelabarr-backend:8092

# External health check URL (accessible from host)
EXTERNAL_HEALTH_URL=http://localhost:8092/health

# =============================================================================
# DOCKER COMPOSE DOCKER CONFIGURATION
# =============================================================================

# Docker socket path - mounted from host system
# Linux/macOS: /var/run/docker.sock
# Windows: //./pipe/docker_engine (handled by Docker Desktop)
DOCKER_SOCKET=/var/run/docker.sock

# Docker group ID - MUST match host system's docker group ID
# Find your host docker group ID:
#   Linux: getent group docker | cut -d: -f3
#   macOS: dscl . -read /Groups/docker PrimaryGroupID
#   Windows: Not applicable (handled automatically)
# 
# CRITICAL: This must match your host system for proper permissions
# Common values: 999 (Ubuntu), 994 (CentOS), 100 (Alpine), 20 (macOS)
DOCKER_GID=999

# Docker timeout for container operations
DOCKER_TIMEOUT=30000

# =============================================================================
# CLI BRIDGE INTEGRATION CONFIGURATION
# =============================================================================

# CLI Bridge path inside container
CLI_BRIDGE_PATH=/dockserver

# Enable CLI Bridge integration (true/false)
CLI_INTEGRATION_ENABLED=true

# Host path to dockserver installation - CRITICAL for CLI Bridge
# This is the path on your host system where dockserver is installed
# Examples:
#   Linux standard: /opt/dockserver
#   User installation: /home/username/dockserver
#   macOS: /Users/username/dockserver
#   Custom: /your/custom/path/dockserver
CLI_BRIDGE_HOST_PATH=../../../dockserver

# =============================================================================
# DOCKER COMPOSE DATA PERSISTENCE
# =============================================================================

# Data storage path inside container
DATA_PATH=/app/data

# Database URL for containerized database
# SQLite (simple): sqlite:///app/data/homelabarr.db
# PostgreSQL (recommended): postgresql://user:pass@postgres:5432/homelabarr
# MySQL: mysql://user:pass@mysql:3306/homelabarr
DATABASE_URL=sqlite:///app/data/homelabarr.db

# Redis URL for containerized Redis (if using)
REDIS_URL=redis://redis:6379

# =============================================================================
# DOCKER COMPOSE DEBUGGING FEATURES
# =============================================================================

# Enable debug mode for Docker development
DEBUG_MODE=true

# Enable CORS logging for debugging container networking
ENABLE_CORS_LOGGING=true

# Enable request logging for debugging API calls
ENABLE_REQUEST_LOGGING=true

# Enable Docker operation logging
ENABLE_DOCKER_LOGGING=true

# =============================================================================
# DOCKER COMPOSE ADVANCED SETTINGS
# =============================================================================

# Request timeout for container networking
REQUEST_TIMEOUT=15000

# Health check timeout
HEALTH_CHECK_TIMEOUT=10000

# Enable health check endpoint
HEALTH_CHECK_ENABLED=true

# Enable metrics collection
METRICS_ENABLED=false

# Validation settings
VALIDATE_DOCKER_SOCKET=true
VALIDATE_SERVICE_URLS=true

# Default Docker network name
DEFAULT_NETWORK=homelabarr

# =============================================================================
# DOCKER COMPOSE DEPLOYMENT NOTES
# =============================================================================

# DOCKER COMPOSE USAGE:
# 1. Copy this file to .env in your project root
# 2. Adjust DOCKER_GID to match your host system
# 3. Modify ports if they conflict with existing services
# 4. Run: docker-compose up -d
# 5. Access frontend at http://localhost:8087
# 6. Access backend at http://localhost:8088

# VOLUME MOUNTING:
# The Docker Compose configuration should include:
# - Docker socket: /var/run/docker.sock:/var/run/docker.sock
# - Data persistence: ./data:/app/data
# - Configuration: ./.env:/app/.env

# SERVICE NETWORKING:
# Services communicate using Docker Compose service names:
# - homelabarr-frontend (React frontend)
# - homelabarr-backend (Express backend)
# - postgres (if using PostgreSQL)
# - redis (if using Redis)

# =============================================================================
# PLATFORM-SPECIFIC DOCKER COMPOSE NOTES
# =============================================================================

# LINUX DOCKER COMPOSE:
# 1. Ensure Docker and Docker Compose are installed
# 2. Add user to docker group: sudo usermod -aG docker $USER
# 3. Find docker group ID: getent group docker | cut -d: -f3
# 4. Set DOCKER_GID to match your system
# 5. Ensure Docker socket permissions: ls -la /var/run/docker.sock

# WINDOWS DOCKER COMPOSE:
# 1. Ensure Docker Desktop is running with Linux containers
# 2. DOCKER_GID is ignored on Windows
# 3. Docker socket is handled automatically by Docker Desktop
# 4. Use PowerShell or Command Prompt for Docker Compose commands

# MACOS DOCKER COMPOSE:
# 1. Ensure Docker Desktop is installed and running
# 2. Find docker group ID: dscl . -read /Groups/docker PrimaryGroupID
# 3. Set DOCKER_GID to match your system (usually 20)
# 4. Docker socket is handled by Docker Desktop

# =============================================================================
# DOCKER COMPOSE TROUBLESHOOTING
# =============================================================================

# Common Docker Compose issues:

# Port Conflicts:
# - Change FRONTEND_PORT or BACKEND_PORT if ports are in use
# - Check: netstat -tlnp | grep -E ':(8087|8088)'
# - Ensure no other services are using the same ports

# Docker Socket Issues:
# - Verify Docker is running: docker ps
# - Check socket permissions: ls -la /var/run/docker.sock
# - Ensure DOCKER_GID matches host: getent group docker
# - For Windows: Ensure Docker Desktop is running

# Service Communication Issues:
# - Check Docker Compose logs: docker-compose logs
# - Verify service names match configuration
# - Ensure services are on the same Docker network
# - Check internal port configuration (PORT=3001)

# Data Persistence Issues:
# - Verify volume mounts in docker-compose.yml
# - Check data directory permissions
# - Ensure DATA_PATH is correctly set
# - Verify database connectivity

# CORS Issues in Docker:
# - Ensure CORS_ORIGIN includes your access URL
# - For development: use CORS_ORIGIN=*
# - Check browser developer tools for CORS errors
# - Verify frontend and backend URLs are accessible

# =============================================================================
# DOCKER COMPOSE VALIDATION COMMANDS
# =============================================================================

# Validate your Docker Compose environment:
# 1. Check Docker: docker --version && docker-compose --version
# 2. Test Docker access: docker ps
# 3. Check ports: netstat -tlnp | grep -E ':(8087|8088|3001)'
# 4. Validate group ID: getent group docker | cut -d: -f3
# 5. Test socket: ls -la /var/run/docker.sock
# 6. Start services: docker-compose up -d
# 7. Check logs: docker-compose logs
# 8. Test health: curl http://localhost:8088/health