# HomelabARR Development Environment Configuration
# This file contains development-specific settings optimized for cross-platform development
# Copy this to .env for development deployment or use with Docker Compose

# =============================================================================
# DEVELOPMENT ENVIRONMENT SETTINGS
# =============================================================================

# Environment mode - enables development-friendly defaults
NODE_ENV=development

# Verbose logging for development and debugging
LOG_LEVEL=debug

# =============================================================================
# DEVELOPMENT SERVER CONFIGURATION
# =============================================================================

# Backend server port (updated to match current working configuration)
PORT=8092

# Frontend and backend ports for Docker Compose (updated to match current working configuration)
FRONTEND_PORT=8084
BACKEND_PORT=8092

# Bind to all interfaces for container compatibility
BIND_ADDRESS=0.0.0.0

# =============================================================================
# DEVELOPMENT CORS CONFIGURATION
# =============================================================================

# Wildcard CORS origin - allows all cross-origin requests for development
# This is ONLY safe in development environments
# Production deployments should NEVER use wildcard origins
CORS_ORIGIN=*

# =============================================================================
# PLATFORM-AGNOSTIC DOCKER CONFIGURATION
# =============================================================================

# Docker socket path - auto-detected by application based on platform
# Linux/macOS: /var/run/docker.sock (default)
# Windows: //./pipe/docker_engine (auto-detected)
# Override only if using custom Docker setup
DOCKER_SOCKET=/var/run/docker.sock

# Docker group ID - MUST match your host system's docker group ID
# Platform-specific instructions:
#
# LINUX:
#   Find group ID: getent group docker | cut -d: -f3
#   Alternative: cat /etc/group | grep docker
#   Common values: 999 (Ubuntu/Debian), 994 (CentOS/RHEL), 100 (Alpine)
#
# MACOS:
#   Find group ID: dscl . -read /Groups/docker PrimaryGroupID
#   Common value: 20
#
# WINDOWS:
#   Not applicable - handled automatically by Docker Desktop
#   This value will be ignored on Windows platforms
DOCKER_GID=999

# Extended timeout for development debugging
DOCKER_TIMEOUT=45000

# =============================================================================
# DEVELOPMENT AUTHENTICATION CONFIGURATION
# =============================================================================

# Disable authentication for easier development
# Enable this (set to true) to test authentication flows
AUTH_ENABLED=false

# Development JWT secret - NOT for production use
JWT_SECRET=homelabarr-dev-secret-change-in-production

# Longer token expiration for development convenience
JWT_EXPIRES_IN=24h

# Simple admin password for development - change immediately in production
DEFAULT_ADMIN_PASSWORD=admin

# =============================================================================
# DEVELOPMENT SERVICE URLS
# =============================================================================

# Service URLs for container-to-container communication
# These are used when running in Docker Compose

# Frontend service URL
# Container: http://homelabarr-frontend:8080 (Docker Compose service name)
# Development: http://localhost:8084 (Vite dev server)
FRONTEND_URL=http://homelabarr-frontend:8080

# Backend service URL
# Container: http://homelabarr-backend:8092 (Docker Compose service name)
# Development: http://localhost:8092 (Express server)
BACKEND_URL=http://homelabarr-backend:8092

# External health check URL for development testing
EXTERNAL_HEALTH_URL=http://localhost:8092/health

# Development database URL (SQLite for simplicity)
DATABASE_URL=sqlite://./data/homelabarr-dev.db

# Development Redis URL (if using Redis container)
REDIS_URL=redis://redis:6379

# =============================================================================
# DEVELOPMENT DEBUGGING FEATURES
# =============================================================================

# Enable all debugging features for development
DEBUG_MODE=true

# Enable CORS request logging to debug cross-origin issues
ENABLE_CORS_LOGGING=true

# Enable detailed request logging for API debugging
ENABLE_REQUEST_LOGGING=true

# Enable detailed Docker operation logging
ENABLE_DOCKER_LOGGING=true

# Enable detailed error messages and stack traces
DETAILED_LOGGING=true

# =============================================================================
# DEVELOPMENT TIMEOUTS AND LIMITS
# =============================================================================

# Extended timeouts for development debugging
REQUEST_TIMEOUT=30000
HEALTH_CHECK_TIMEOUT=10000

# Enable health check endpoint
HEALTH_CHECK_ENABLED=true

# Enable metrics collection for development monitoring
METRICS_ENABLED=true

# =============================================================================
# DEVELOPMENT VALIDATION SETTINGS
# =============================================================================

# Enable all validation in development for early error detection
VALIDATE_DOCKER_SOCKET=true
VALIDATE_SERVICE_URLS=true

# =============================================================================
# PLATFORM-SPECIFIC DEVELOPMENT NOTES
# =============================================================================

# WINDOWS DEVELOPMENT:
# 1. Ensure Docker Desktop is running with Linux containers enabled
# 2. Use PowerShell or Command Prompt for environment setup
# 3. Docker socket path is auto-detected (//./pipe/docker_engine)
# 4. DOCKER_GID is ignored on Windows
# 5. For WSL2: Use Linux instructions within WSL2 environment

# LINUX DEVELOPMENT:
# 1. Ensure Docker is installed and running: sudo systemctl start docker
# 2. Add user to docker group: sudo usermod -aG docker $USER
# 3. Log out and back in for group changes to take effect
# 4. Verify docker access: docker ps
# 5. Check group ID: getent group docker | cut -d: -f3

# MACOS DEVELOPMENT:
# 1. Ensure Docker Desktop is installed and running
# 2. Docker socket is handled automatically by Docker Desktop
# 3. Check docker group ID: dscl . -read /Groups/docker PrimaryGroupID
# 4. Usually no additional configuration needed

# DOCKER COMPOSE DEVELOPMENT:
# 1. Use this file as .env in your project root
# 2. Run: docker-compose up -d
# 3. Services will communicate using service names (homelabarr-frontend, homelabarr-backend)
# 4. Access frontend at http://localhost:8087
# 5. Access backend at http://localhost:8088

# =============================================================================
# DEVELOPMENT TROUBLESHOOTING
# =============================================================================

# Common development issues and solutions:

# CORS Issues:
# - Ensure CORS_ORIGIN=* is set
# - Check browser developer tools for CORS errors
# - Verify frontend and backend URLs are correct

# Docker Connection Issues:
# - Verify Docker is running: docker ps
# - Check socket permissions: ls -la /var/run/docker.sock
# - Ensure DOCKER_GID matches host system
# - For containers: verify socket is mounted as volume

# Port Conflicts:
# - Check if ports are in use: netstat -tlnp | grep :3001
# - Change PORT, FRONTEND_PORT, or BACKEND_PORT if needed
# - Ensure no other services are using the same ports

# Authentication Issues:
# - Set AUTH_ENABLED=false for development
# - Use simple credentials: admin/admin
# - Check JWT_SECRET is set correctly

# Service Communication Issues:
# - Verify service URLs match Docker Compose service names
# - Check network connectivity between containers
# - Use docker-compose logs to debug service startup

# =============================================================================
# DEVELOPMENT VALIDATION COMMANDS
# =============================================================================

# Validate your development environment:
# 1. Check Docker: docker --version && docker ps
# 2. Check Node.js: node --version && npm --version
# 3. Check ports: netstat -tlnp | grep -E ':(3001|8087|8088)'
# 4. Test Docker socket: docker info
# 5. Validate environment: node -e "console.log('NODE_ENV:', process.env.NODE_ENV)"