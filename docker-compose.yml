# HomelabARR Docker Compose Configuration
#
# Development Environment Configuration:
# This configuration is optimized for development with permissive CORS settings
# and comprehensive logging. For production deployment, use docker-compose.prod.yml
#
# Docker Socket Access Configuration:
# - DOCKER_GID: Set this to your host system's docker group ID
#   Find it with: getent group docker | cut -d: -f3 (Linux)
#   Or: cat /etc/group | grep docker (Linux)
#   Default: 999 (common on many systems)
# - DOCKER_SOCKET: Path to Docker socket 
#   Linux/macOS: /var/run/docker.sock
#   Windows: //./pipe/docker_engine (handled automatically by platform detection)
#
# Platform-Agnostic Usage:
#   Linux/macOS: DOCKER_GID=$(getent group docker | cut -d: -f3) docker-compose up -d
#   Windows: docker-compose up -d

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: homelabarr-frontend
    restart: unless-stopped
    environment:
      # Development environment configuration
      - NODE_ENV=${NODE_ENV:-development}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    ports:
      - "${FRONTEND_PORT:-8084}:8080"
    networks:
      - homelabarr
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: homelabarr-backend
    restart: unless-stopped
    environment:
      # Development environment configuration
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=8092
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      
      # Docker configuration with platform-agnostic defaults
      - DOCKER_SOCKET=${DOCKER_SOCKET:-/var/run/docker.sock}
      - DOCKER_GID=${DOCKER_GID:-999}
      
      # CLI Bridge configuration for integration
      - CLI_BRIDGE_PATH=/dockserver
      - CLI_INTEGRATION_ENABLED=true
      
      # Authentication configuration for development
      - AUTH_ENABLED=${AUTH_ENABLED:-false}
      - JWT_SECRET=${JWT_SECRET:-homelabarr-dev-secret-change-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD:-admin}
      
      # Network configuration for cross-platform compatibility
      - BIND_ADDRESS=0.0.0.0
      - FRONTEND_URL=http://homelabarr-frontend:8080
      - BACKEND_URL=http://homelabarr-backend:8092
      - EXTERNAL_HEALTH_URL=http://localhost:${BACKEND_PORT:-8092}/health
    volumes:
      # Platform-agnostic Docker socket mounting
      - /var/run/docker.sock:/var/run/docker.sock:rw
      # CLI Bridge mount point - maps to actual dockserver location
      - ../../../dockserver:/dockserver:rw
      # Data persistence
      - homelabarr-data:/app/data
    ports:
      - "${BACKEND_PORT:-8092}:8092"
    networks:
      - homelabarr
    group_add:
      - "${DOCKER_GID:-999}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

networks:
  homelabarr:
    name: homelabarr
    driver: bridge
    # Platform-agnostic network configuration
    # Ensures consistent networking across Windows and Linux Docker environments
    driver_opts:
      com.docker.network.bridge.name: homelabarr-bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  homelabarr-data:
    name: homelabarr-data
    driver: local
