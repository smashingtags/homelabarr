# HomelabARR Environment Configuration Template
# Copy this file to .env and customize for your deployment
# This template provides comprehensive platform-specific configuration options

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Environment mode - determines default behavior for CORS, logging, and features
# Valid values: development, production, test
# Default: development (if not specified)
NODE_ENV=production

# Logging level - controls verbosity of application logs
# Valid values: debug, info, warn, error
# Default: info (production), debug (development)
LOG_LEVEL=info

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Backend server port
# Default: 3001
PORT=3001

# Frontend port (for Docker Compose and service URLs)
# Default: 8087
FRONTEND_PORT=8087

# Backend port (for Docker Compose and service URLs)
# Default: 8088
BACKEND_PORT=8088

# Server bind address - controls which interfaces the server listens on
# 0.0.0.0: Listen on all interfaces (required for containers)
# localhost/127.0.0.1: Listen only on localhost (development only)
# Default: 0.0.0.0 (auto-detected based on environment)
BIND_ADDRESS=0.0.0.0

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# CORS origin configuration - controls which domains can access the API
# Development: Use * for wildcard (allows all origins)
# Production: Use specific domain(s) separated by commas
# Examples:
#   Single domain: https://your-domain.com
#   Multiple domains: https://app.example.com,https://admin.example.com
#   Wildcard (development only): *
# Default: * (development), http://localhost:5173 (production)
CORS_ORIGIN=https://your-domain.com

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Docker socket path - platform-specific configuration
# Linux/macOS: /var/run/docker.sock
# Windows Docker Desktop: //./pipe/docker_engine
# Custom: /path/to/custom/docker.sock
# Default: Auto-detected based on platform
DOCKER_SOCKET=/var/run/docker.sock

# Docker group ID - MUST match your host system's docker group ID
# This is critical for proper Docker socket access permissions
# 
# How to find your docker group ID:
#   Linux: getent group docker | cut -d: -f3
#   Linux (alternative): cat /etc/group | grep docker
#   macOS: dscl . -read /Groups/docker PrimaryGroupID
#   Windows: Not applicable (handled automatically)
# 
# Common values by distribution:
#   Ubuntu/Debian: 999, 998
#   CentOS/RHEL: 994, 993
#   Alpine: 100
#   macOS: 20
# Default: 999 (Linux), null (Windows/macOS)
DOCKER_GID=999

# Docker connection timeout (milliseconds)
# Default: 30000 (30 seconds)
DOCKER_TIMEOUT=30000

# Docker host URL (alternative to socket path)
# Examples:
#   Unix socket: unix:///var/run/docker.sock
#   TCP: tcp://localhost:2376
#   Windows named pipe: npipe://./pipe/docker_engine
# Default: Auto-generated from DOCKER_SOCKET
# DOCKER_HOST=unix:///var/run/docker.sock

# =============================================================================
# AUTHENTICATION CONFIGURATION
# =============================================================================

# Enable/disable authentication system
# true: Authentication required for all endpoints
# false: Open access (development only)
# Default: true (production), false (development)
AUTH_ENABLED=true

# JWT secret key for token signing - MUST be changed in production
# Use a strong, random string (minimum 32 characters recommended)
# Generate with: openssl rand -base64 32
JWT_SECRET=your-secure-jwt-secret-here-change-this-in-production

# JWT token expiration time
# Examples: 1h, 24h, 7d, 30d
# Default: 24h
JWT_EXPIRES_IN=24h

# Default admin password - MUST be changed on first login
# Use a strong password with mixed case, numbers, and symbols
DEFAULT_ADMIN_PASSWORD=your-secure-admin-password-change-immediately

# =============================================================================
# SERVICE URLS (Container Communication)
# =============================================================================

# Frontend service URL - used for internal service communication
# Container: http://frontend:5173
# Development: http://localhost:5173
# Production: https://your-frontend-domain.com
# Default: Auto-detected based on environment
FRONTEND_URL=http://localhost:8087

# Backend service URL - used for health checks and service discovery
# Container: http://backend:3001
# Development: http://localhost:3001
# Production: https://your-api-domain.com
# Default: Auto-detected based on environment
BACKEND_URL=http://localhost:8088

# External health check URL - for load balancers and monitoring
# Default: http://localhost:{PORT}/health
EXTERNAL_HEALTH_URL=http://localhost:3001/health

# Database URL (if using external database)
# Examples:
#   SQLite: sqlite://./data/homelabarr.db
#   PostgreSQL: postgresql://user:pass@localhost:5432/homelabarr
#   MySQL: mysql://user:pass@localhost:3306/homelabarr
# Default: sqlite://./data/homelabarr.db
# DATABASE_URL=sqlite://./data/homelabarr.db

# Redis URL (if using Redis for caching/sessions)
# Examples:
#   Local: redis://localhost:6379
#   Container: redis://redis:6379
#   Auth: redis://user:pass@localhost:6379
# Default: redis://redis:6379
# REDIS_URL=redis://redis:6379

# =============================================================================
# DEVELOPMENT AND DEBUGGING FEATURES
# =============================================================================

# Enable debug mode - provides additional logging and error details
# true: Enable debug features and detailed error messages
# false: Production-safe error handling
# Default: false (production), true (development)
DEBUG_MODE=false

# Enable CORS request logging - logs all CORS requests for debugging
# true: Log CORS requests (development only)
# false: No CORS logging
# Default: false (production), true (development)
ENABLE_CORS_LOGGING=false

# Enable detailed request logging - logs all HTTP requests
# true: Log all requests with details
# false: Standard access logging only
# Default: false (production), true (development)
ENABLE_REQUEST_LOGGING=false

# Enable detailed Docker logging - logs Docker operations
# true: Log Docker connection attempts, retries, and operations
# false: Standard Docker logging only
# Default: false (production), true (development)
ENABLE_DOCKER_LOGGING=false

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Request timeout (milliseconds)
# Default: 10000 (10 seconds)
REQUEST_TIMEOUT=10000

# Health check timeout (milliseconds)
# Default: 5000 (5 seconds)
HEALTH_CHECK_TIMEOUT=5000

# Enable health check endpoint
# Default: true
HEALTH_CHECK_ENABLED=true

# Enable metrics collection
# Default: false
METRICS_ENABLED=false

# Docker socket validation
# Default: true
VALIDATE_DOCKER_SOCKET=true

# Service URL validation
# Default: true
VALIDATE_SERVICE_URLS=true

# =============================================================================
# PLATFORM-SPECIFIC NOTES
# =============================================================================

# WINDOWS USERS:
# - Docker socket path is auto-detected (usually //./pipe/docker_engine)
# - DOCKER_GID is not applicable and will be ignored
# - Ensure Docker Desktop is running with Linux containers enabled
# - Use PowerShell or Command Prompt for environment variable setup

# LINUX USERS:
# - Ensure your user is in the docker group: sudo usermod -aG docker $USER
# - Check docker group ID: getent group docker | cut -d: -f3
# - Ensure Docker daemon is running: sudo systemctl start docker
# - For containers, mount Docker socket: -v /var/run/docker.sock:/var/run/docker.sock

# MACOS USERS:
# - Docker Desktop handles socket path automatically
# - Check docker group ID: dscl . -read /Groups/docker PrimaryGroupID
# - Ensure Docker Desktop is running and accessible

# CONTAINER DEPLOYMENT:
# - Always use BIND_ADDRESS=0.0.0.0
# - Mount Docker socket as volume
# - Set appropriate DOCKER_GID to match host system
# - Use service names for internal communication (FRONTEND_URL, BACKEND_URL)

# =============================================================================
# VALIDATION EXAMPLES
# =============================================================================

# To validate your configuration:
# 1. Check Docker connection: docker ps
# 2. Verify group membership: groups $USER
# 3. Test socket access: ls -la /var/run/docker.sock
# 4. Check port availability: netstat -tlnp | grep :3001
# 5. Validate environment: node -e "console.log(process.env.NODE_ENV)"